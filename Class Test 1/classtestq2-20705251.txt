# -*- coding: utf-8 -*-
"""
Created on Fri Nov 10 11:28:42 2023

@author: Hardeep Kaur Gill

Class Test - Question 2


"""

#import libraries
import numpy as np
import matplotlib.pyplot as plt

#define the function i am using for this exercise
def f(x):
    return np.cos((np.pi*x**2)/2)

def g(x):
    return np.sin((np.pi*x**2)/2)

def simpRule(steps, start , end, func):
    #steps are the integration points
    #start is the start of the integral
    #end is the end of the integral
    #func chooses which function to use out of the 2 above(either f(x), or g(x))
      #0 is f(x)
      #1 is g(x)
    
    #define the step size
    h = (end-start)/steps 
    #print("H: ", h) manually checked if h is even, it is 0.002
    
    if(func == 0):
        ans = f(start) + f(end)
        odd, even = 0, 0
        
        
        x = start - h
        
        for n in range(1, steps, 2):
            x = x + 2*h
            odd = odd + 4*f(x)
            
        x = start
        for n in range(2, steps, 2):
            x = x + 2*h
            even = even + 2*f(x)
            
        ans = odd + even + ans
        ans = ans * h *(1/3)
        
        return ans
    else:
        ans = g(start) + g(end)
        odd, even = 0, 0
        
        
        x = start - h
        
        for n in range(1, steps, 2):
            x = x + 2*h
            odd = odd + 4*g(x)
            
        x = start
        for n in range(2, steps, 2):
            x = x + 2*h
            even = even + 2*g(x)
            
        ans = odd + even + ans
        ans = ans * h *(1/3)
        
        return ans

#-----------main code------------------
points = 500
num = 1000
#print the result for the first required integral
print(simpRule(points, 0, 1, 0))

#print the result for the second required integral
print(simpRule(points, 0, 0.5, 1))

#define u values of the graph
u = np.linspace(-10, 10, num) 

#define c(u) as it is the y axis of the graph
c = np.array(simpRule(points, 0, u, 0))

#define s(u) as it is the x axis of the graph
s = np.array(simpRule(points, 0, u, 1))

#plot the graph
plt.plot(s, c)
plt.xlabel("C(u)")
plt.ylabel("S(u)")
plt.title("Question 2 - C(u) vs S(u), aka Cornu Spiral")