# -*- coding: utf-8 -*-
"""
Created on Tue Oct 24 14:57:51 2023

@author: Hardeep Kaur Gill

Exercise 4.4


"""
#import libraries
import numpy as np

start, end = 0, np.pi

#define the function i am using for this exercise
def f(x):
    return np.sin(x)

def simpRule(steps):
    
    #define the step size
    h = (end-start)/steps #SHOULD H BE EVEN HERE TOO?
    
    ans = f(start) + f(end)
    odd, even = 0, 0
    
    
    x = start - h
    
    for n in range(1, steps, 2):
        x = x + 2*h
        odd = odd + 4*f(x)
        
    x = start
    for n in range(2, steps, 2):
        x = x + 2*h
        even = even + 2*f(x)
        
    ans = odd + even + ans
    ans = ans * h *(1/3)
    
    return ans

#-----------main code------------------

#Analytical asnwer 
analyt = -np.cos(end)- (-np.cos(start))

#print the result 
print("Simpson's formula: ", simpRule(10))
print("Analytical answer: ", analyt)
print()

#errors 
print("Error on 10 steps: " , analyt - simpRule(10))
print("Error on 20 steps: " , analyt - simpRule(20))
print("Error on 100 steps: " , analyt - simpRule(100))